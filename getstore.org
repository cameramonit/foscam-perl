* TODO make mpeg video from jpegs program [ foscam-jpeg-to-mpg.pl ]
** Main
#+begin_src perl :tangle /usr/local/bin/tdw/foscam-jpeg-to-mpg.pl :shebang #!/usr/bin/env perl :noweb yes
my $directory = $ARGV[0] or die "Please supply a directory";
use Cwd;
my $working_dir = getcwd;
chdir $directory or die "Unable to change to $directory";
my $mpeg_video_filename = build_video_filename();
print "DEBUG: $mpeg_video_filename\n";
system("ffmpeg -f image2 -i frame_%05d.jpg $mpeg_video_filename");
chdir $working_dir or die "Unable to chdir to $working_dir";
<<build-video-filename-subroutine>>
#+end_src  
** build_video_filename subroutine
#+name: build-video-filename-subroutine
#+begin_src perl
  sub build_video_filename {
      # /home/troy/video/cam/12/11/19/9/cam1
      # /home/troy/video/cam/12/11/19/9/camtroy/JPG_
      my $asf_dir = getcwd;
      $asf_dir =~ /\/(\d+)\/(\d+)\/(\d+)\/(\d+)\/(.*?)\/(.*?)$/;
      my ( $year, $month, $day, $hour, $camera_name ) = ( $1, $2, $3, $4, $5 );
      return "/tmp/$year.$month.$day.$hour.$camera_name.mpg";
  }
#+end_src
**  http://ffmpeg.org/faq.html
#+begin_src sh
ffmpeg -f image2 -i img%d.jpg /tmp/a.mpg
#+end_src    
* The foscam-getstore-asf.pl program
  foscam-getstore-asf.pl cam1 cam1
** The main routine (foscam-getstore-asf.pl)
#+begin_src perl :tangle /usr/local/bin/tdw/foscam-getstore-asf.pl :shebang #!/usr/bin/env perl :noweb yes
my $camera_name = $ARGV[0];
my $ip_address = $ARGV[1];
use LWP::Simple;
my $url = "http://admin:\@$ip_address/videostream.asf";
$url = "http://admin:\@$ip_address/videostream.asf";
my $file = build_filename($camera_name);
my $logfile = "log.$camera_name";
print "DEBUG: opening $logfile\n";
open($log, ">", $logfile) or die "Unable to open $logfile: $!";
print $log "$$:$file\n";
close $log;
my $return = getstore($url,$file);
<<build-filename-subroutine>>
#+end_src  
** The build_filename subroutine
#+name: build-filename-subroutine
#+begin_src perl
  sub build_filename {
      my $camera_name = shift;
      my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
          localtime(time);
      $year -= 100;
      $mon += 1;
      my $directory = "$year/$mon/$mday/$hour/$camera_name";
      use File::Path qw(make_path);
      make_path($directory, { verbose => 1 });
      my $file = "$year/$mon/$mday/$hour/$camera_name/$year.$mon.$mday.$hour.$min.$camera_name.asf";
      return $file;
  }
#+end_src
* foscam-daemon.pl for 1, 5, 30, or 60 minutes ( foscam-daemon.pl )
** The main program  
#+begin_src perl :tangle /usr/local/bin/tdw/foscam-daemon.pl :shebang #!/usr/bin/env perl :noweb yes
  use warnings;
  use strict;
  use Getopt::Long;
  my $interval;
  GetOptions( "interval=i" => \$interval );
  my $camera_name = $ARGV[0];
  my $camera_ip_address = $ARGV[1];
  my $command = "foscam-getstore-asf.pl $camera_name $camera_ip_address \&";
  print "=> $command\n" && system($command);
  sleep sleep_until_interval($interval);
  
  while (1) {
      open(my $in, "<", "log.$camera_name") or warn "Unable to open log file log.$camera_name: $!";
      while(<$in>) {
          my ($pid,$filename) = split(':',$_);
          print "PID = $pid\n";
          system("kill -15 $pid");
          print "=> $command\n" && system($command);
      }
      sleep sleep_until_interval($interval);
  }
  
  <<sleep_until_interval_subroutine>>
#+end_src
** sleep_until_interval subroutine
#+name: sleep_until_interval_subroutine
#+begin_src perl
  sub sleep_until_interval {
      my $interval_minutes = shift;
      my $sleep_until_interval = 0;
      my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
          localtime(time);
      $year -= 100;
      $mon += 1;
      
      print "DEBUG: $hour, $min, $sec\n";
      my $seconds_past_hour = $min * 60 + $sec;
      $sleep_until_interval = $seconds_past_hour%($interval_minutes*60);
      $sleep_until_interval = ($interval_minutes*60) - $sleep_until_interval;
      
      # if ( $interval_minutes == 1 ) {
      #     $sleep_until_interval = $seconds_past_hour%$interval_minutes;
      #     $sleep_until_interval = 60 - $sleep_until_interval;
      # } elsif ( $interval_minutes == 60 ) {
      #     # ONE HOUR
      #     $sleep_until_interval = 3600 - $seconds_past_hour;
      # }
      print "DEBUG: return sleep $sleep_until_interval seconds\n";
      return $sleep_until_interval;
  }
  
#+end_src

* Emit jpegs from the asf ( asf-to-jpeg.pl )
** Main program  
#+begin_src perl :tangle /usr/local/bin/tdw/asf-to-jpeg.pl :shebang #!/usr/bin/env perl :noweb yes
my $asf = $ARGV[0] or die;
use Cwd;
my $working_dir = getcwd;
my $jpeg_dir = make_jpeg_directory($asf);
my $time = time;
system("ffmpeg -i $asf -c:v copy -bsf:v mjpeg2jpeg $jpeg_dir/frame_%05d.jpg");
print "Made jpegs in ", time - $time, " seconds.\n";
# <<make-avi>>
# <<make-mp4>>
# <<make-mpg>>
<<make-jpeg-directory-subroutine>>
#+end_src
** Make mpg
#+name: make-mpg
#+begin_src perl
chdir($jpeg_dir) or die "Unable to chdir to $jpeg_dir: $!";
system("ffmpeg -r 5 -f image2 -i frame_%05d.jpg $jpeg_dir.mpg");
system("mv $jpeg_dir.avi ..");
chdir $working_dir or die "Unable to chdir to $working_dir: $!";
#+end_src
** Make avi
#+name: make-avi
#+begin_src perl
chdir($jpeg_dir) or die "Unable to chdir to $jpeg_dir: $!";
system("ffmpeg -r 5 -i frame_%d.jpg $jpeg_dir.avi");
system("mv $jpeg_dir.avi ..");
chdir $working_dir or die "Unable to chdir to $working_dir: $!";
#+end_src
** Make mp4
#+name: make-mp4
#+begin_src perl
chdir($jpeg_dir) or die "Unable to chdir to $jpeg_dir: $!";
system("ffmpeg -r 5 -q:v 31 -i frame_%05d.jpg $jpeg_dir.mp4");
system("mv $jpeg_dir.mp4 ..");
chdir $working_dir or die "Unable to chdir to $working_dir: $!";
#+end_src
** Make a directory in which to store the jpegs
#+name: make-jpeg-directory-subroutine
#+begin_src perl
sub make_jpeg_directory {
  my $asf = shift;
  $asf =~ /(\d+)\.asf/;
  my $dir = "JPG_$1";
  return $dir if -e $dir;
  mkdir $dir or die "Unable to make $dir dir: $!";
  return $dir;
}
#+end_src   

* Make AVI from Jpegs
   
   ffmpeg -i frame_%d.jpg -c:v copy foscam.avi

* The wget program
#+begin_src sh
wget http://admin:@camtroy/videostream.asf
#+end_src
* Demo programs
** Figure out how long to sleep
#+begin_src perl :tangle sleep-until-hour.pl :shebang #!/usr/bin/env perl :noweb yes
  use warnings;
  use strict;
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
      localtime(time);
  $year -= 100;
  $mon += 1;
  print "$hour, $min, $sec\n";
  my $seconds_past_hour = $min * 60 + $sec;
  print "seconds past hour: $seconds_past_hour\n";
  my $five_minutes_sleep = $seconds_past_hour%300;
  my $one_minute_sleep = $seconds_past_hour%60;
  print "one minute modulo: $one_minute_sleep\n";
  $one_minute_sleep = 60 - $one_minute_sleep;
#  my $sleep_until = 3600 - $seconds_past_hour;
#  print "I will sleep for $sleep_until seconds\n";
  sleep $one_minute_sleep;
#+end_src
* Experiments
** Make pnm files
   Following doesn't work: jpeg images are created
#+begin_src sh
ffmpeg -i $asf -c:v copy -bsf:v mjpeg2jpeg $jpeg_dir/frame_%05d.pnm
#+end_src
* File naming scheme
